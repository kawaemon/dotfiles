[[plugins]]
repo = "neovim/nvim-lspconfig"

[[plugins]]
repo = "hrsh7th/cmp-buffer"

[[plugins]]
repo = "hrsh7th/cmp-path"

[[plugins]]
repo = "hrsh7th/cmp-nvim-lsp"

[[plugins]]
repo = "L3MON4D3/LuaSnip"

[[plugins]]
repo = "saadparwaiz1/cmp_luasnip"
depends = ["L3MON4D3/LuaSnip"]

[[plugins]]
repo = "hrsh7th/cmp-cmdline"

[[plugins]]
repo = "hrsh7th/nvim-cmp"
depends = [
    "neovim/nvim-lspconfig",
    "hrsh7th/cmp-buffer",
    "hrsh7th/cmp-path",
    "hrsh7th/cmp-nvim-lsp",
    "saadparwaiz1/cmp_luasnip",
    "L3MON4D3/LuaSnip",
    "hrsh7th/cmp-cmdline",
]
hook_add = """
command! -nargs=0 Lsp :lua require("klsp").setup()

lua <<EOF
vim.cmd("set completeopt=menu,menuone,noselect")
vim.diagnostic.config({
    virtual_text = {
        prefix = "",
        spacing = 0,
        format = function(diagnostic)
            local severity = ""

            if diagnostic.severity == vim.diagnostic.severity.ERROR then
                severity = "E"
            elseif diagnostic.severity == vim.diagnostic.severity.WARN then
                severity = "W"
            elseif diagnostic.severity == vim.diagnostic.severity.INFO then
                severity = "I"
            elseif diagnostic.severity == vim.diagnostic.severity.HINT then
                severity = "H"
            end

            return string.format("%s: %s", severity, diagnostic.message)
        end
    }
})

local cmp = require("cmp")
local luasnip = require("luasnip")

cmp.setup({
    snippet = {
        expand = function(s) luasnip.lsp_expand(s.body) end
    },

    sources = cmp.config.sources({
        { name = "nvim_lsp" },
        { name = "luasnip" }
    }, {
        { name = "buffer" },
        { name = "path" },
    }),

    mapping = {
        ["<Tab>"] = cmp.mapping(cmp.mapping.select_next_item(), { "i", "s" }),
        ["<S-Tab>"] = cmp.mapping(cmp.mapping.select_prev_item(), { "i", "s" }),
        ["<C-Space>"] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
        ["<CR>"] = cmp.mapping.confirm({ select = true }),
    },

    experimental = {
        ghost_text = true,
        native_menu = true,
    },
})

cmp.setup.cmdline("/", { sources = { { name = "buffer" } } })
cmp.setup.cmdline(":", { sources = { { name = "cmdline" }, { name = "path" } } })
EOF
"""
